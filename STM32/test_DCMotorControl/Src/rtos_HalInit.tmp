#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the thread(s) */
#t/* definition and creation of Default */
#tosThreadDef(Default, DefaultTask, osPriorityNormal, 0, 128);
#tDefaultHandle = osThreadCreate(osThread(Default), NULL);
#n
#t/* definition and creation of MinorLoop */
#tosThreadDef(MinorLoop, MinorLoopTask, osPriorityRealtime, 0, 256);
#tMinorLoopHandle = osThreadCreate(osThread(MinorLoop), NULL);
#n
#t/* definition and creation of MajorLoopControl */
#tosThreadDef(MajorLoopControl, MajorLoopTask, osPriorityHigh, 0, 1024);
#tMajorLoopControlHandle = osThreadCreate(osThread(MajorLoopControl), NULL);
#n
#t/* definition and creation of SerialCommunication */
#tosThreadDef(SerialCommunication, SerialCommunicationTask, osPriorityLow, 0, 512);
#tSerialCommunicationHandle = osThreadCreate(osThread(SerialCommunication), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
